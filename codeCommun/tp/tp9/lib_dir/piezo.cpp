//==========================================================================================================//
//PLEASE READ THE FOLLOWING
//==========================================================================================================//

//There are two timer/counters in the atmega324pa

//We will be using one for this music generation. We will use the timer/counter 1

//They each have OCxA/B pins that are the output of the PWM generated by them
//The important part here is to understand their location depending on which ones you want.

//Piezo OCxA/OCxB pin locations	

//(PCINT28/XCK1/OC1B) 		PD4 
//(PCINT29/OC1A) 			PD5 

//What you pass in the piezo_init function is that location value : PD4 or PD5

//==========================================================================================================//

#include "piezo.h"

volatile uint8_t setup_value;

/*****************************************************************************
*
*   Function name : piezo_init
*
*   Returns :       void
*
*   Parameters :    uint8_t location_value -> possible values: {PD4, PD5}
					uint8_t volume -> possible values: {0, 1, 2, ..., 100}
*
*   Purpose :       Set the timer/counter registers for the music pwm
*
*****************************************************************************/
void piezoInit(uint8_t location_value, uint8_t volume){
	setup_value = location_value;
	switch(setup_value){
   		case PD4: 
			DDRD |= _BV(DDD4); //OC1B as output
			OCR1B = volume;
   		    break;
   		case PD5:
			DDRD |= _BV(DDD5); //OC1B as output
			OCR1A = volume;
   		    break;
	}
	TCCR1A |= _BV(COM1B1);  //Clear OC1A/OC1B on compare match
	TCCR1B |= _BV(WGM13) 	//mode 8, PWM, Phase and Frequency Correct (TOP value is ICR1)
	   	   |  _BV(CS11);
}


/*****************************************************************************
*
*   Function name : setVolume
*
*   Returns :       void
*
*   Parameters :    uint8_t volume -> possible values: {0, 1, 2, ..., 100}
*
*   Purpose :       Set the volume. More accurately... this sets the duty cycle.
*					Setting the duty cycle should yield in different sound, yet
*					it reduces the volume. Might have been fed misleading info.
*
*****************************************************************************/
void setVolume(uint8_t volume){
	switch(setup_value){
   		case PD4: 
			OCR1B = volume;
   		    break;
   		case PD5:
			OCR1A = volume;
   		    break;
	}
}

/*****************************************************************************
*
*   Function name : playNote
*
*   Returns :       void
*
*   Parameters :    uint8_t duration_in_ms -> possible values: {0, 1, 2, ..., 65535}
*					uint8_t note  -> possible values: {45, 46, 47, ..., 81}
*
*   Purpose :       Set the timer/counter registers for the music pwm
*
*****************************************************************************/

void playNote(uint8_t midi_key, uint16_t duration_in_ms){
	ICR1H = (note[midi_key] >> 8); //first set the high byte
	ICR1L = note[midi_key];        //now the low byte
	variableDelay(duration_in_ms);
}